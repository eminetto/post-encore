// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	user "encore.app/user"
	mock "github.com/stretchr/testify/mock"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// Auth provides a mock function with given fields: ctx, p
func (_m *Interface) Auth(ctx context.Context, p *user.AuthParams) (*user.AuthResponse, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for Auth")
	}

	var r0 *user.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.AuthParams) (*user.AuthResponse, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.AuthParams) *user.AuthResponse); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.AuthParams) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: ctx, p
func (_m *Interface) ValidateToken(ctx context.Context, p *user.ValidateTokenParams) (*user.ValidateTokenResponse, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *user.ValidateTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.ValidateTokenParams) (*user.ValidateTokenResponse, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.ValidateTokenParams) *user.ValidateTokenResponse); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.ValidateTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.ValidateTokenParams) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
